#!/bin/bash

if ! command -v skopeo &>/dev/null; then
	echo "Installing skopeo dependency"
	sudo apt install skopeo -y
fi

if ! command -v jq &>/dev/null; then
	echo "Installing jq dependency"
	sudo apt install jq -y
fi

if [ -n "$DOCKER_VERSIONS" ]; then
	echo "status,remote url,local created,remote created" >"$DOCKER_VERSIONS"
fi

for imageid in $(docker image ls -q -f dangling=false); do
	imagename=$(docker image ls -f dangling=false --format "{{.ID}} {{.Repository}}:{{.Tag}}" | grep $imageid -w | cut -d " " -f 2)
	tagname=$(docker image ls -f dangling=false --format "{{.ID}} {{.Tag}}" | grep $imageid -w | cut -d " " -f 2)

	if [[ "$tagname" = "<none>" ]]; then
		continue
	fi

	count=$(echo "$imagename" | grep -o "/" | wc -l)
	remoteurl="docker://$imagename"

	if ((count < 2)); then
		remoteurl="docker://docker.io/$imagename"
	fi

	localcreated=$(docker image inspect "$imagename" | jq ".[].Created" | tr -d '"')
	remotecreated=$(skopeo inspect --config "$remoteurl" | jq ".created" | tr -d '"')
	status="update-due"

	if [ "$localcreated" = "$remotecreated" ]; then
		echo "$imagename is up-to-date."
		status="up-to-date"
	else
		echo "$imagename update-due, pulling update from remote $remoteurl."
		docker pull "$imagename"
		if [ $? -eq 0 ]; then
			echo "Image pulled, restarting affected containers."
			for containerid in $( docker container ls -f "ancestor=$imagename" -q); do
				docker restart "$containerid"
			done
			echo "Affected containers restarted."
		else
			echo "Something went wrong during the update, no containers have been restarted."
		fi
	fi

	if [ -n "$DOCKER_VERSIONS" ]; then
		echo "$status,$remoteurl,$localcreated,$remotecreated" >>"$DOCKER_VERSIONS"
	fi

done

echo "Removing dangling images."
docker rmi $(docker image ls -q -f dangling=true)
echo "Done."

if [ -n "$DOCKER_VERSIONS" ]; then
	echo ""
	echo "Report saved to $DOCKER_VERSIONS"
fi

echo ""
echo ""
